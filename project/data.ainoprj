AINOPRJ_START
	NODE_START
		node_id=1687309349376=int
		node_name=preprocessor_fitter=str
		node_type=preprocessor=str
		task=fit_preprocessor=str
		message=Preprocessor fitted=str
		node_data=gASVhwAAAAAAAACMGnNrbGVhcm4ubGluZWFyX21vZGVsLl9iYXNllIwQTGluZWFyUmVncmVzc2lvbpSTlCmBlH2UKIwNZml0X2ludGVyY2VwdJSIjAZjb3B5X1iUiIwGbl9qb2JzlE6MCHBvc2l0aXZllImMEF9za2xlYXJuX3ZlcnNpb26UjAUxLjYuMJR1Yi4==str
		params={'mean_': [5.843333333333335, 3.057333333333334, 3.7580000000000027, 1.199333333333334], 'scale_': [0.8253012917851409, 0.43441096773549437, 1.7594040657753032, 0.7596926279021594], 'var_': [0.6811222222222222, 0.1887128888888887, 3.0955026666666674, 0.5771328888888888]}=dict
		x_loc=5=int
		y_loc=4=int
		input_nodes=[1687312831824]=list
		output_nodes=[1687311112896]=list
	NODE_END
	NODE_START
		node_id=1687312831824=int
		node_name=preprocessor_transformer=str
		node_type=preprocessor=str
		task=transform_preprocessor=str
		message=Preprocessor transformed=str
		node_data=gASVhwAAAAAAAACMGnNrbGVhcm4ubGluZWFyX21vZGVsLl9iYXNllIwQTGluZWFyUmVncmVzc2lvbpSTlCmBlH2UKIwNZml0X2ludGVyY2VwdJSIjAZjb3B5X1iUiIwGbl9qb2JzlE6MCHBvc2l0aXZllImMEF9za2xlYXJuX3ZlcnNpb26UjAUxLjYuMJR1Yi4==str
		params={}=dict
		x_loc=5=int
		y_loc=5=int
		input_nodes=[1687309349376]=list
		output_nodes=[1687311112896]=list
	NODE_END
AINOPRJ_END